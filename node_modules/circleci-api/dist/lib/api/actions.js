"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var client_1 = require("../client");
/**
 * Commit a build action, returns a summary of the new build.
 *
 * Retry a build
 * @see https://circleci.com/docs/api/v1-reference/#retry-build
 * @example POST - /project/:vcs-type/:username/:project/:build_num/retry
 *
 * Cancel a build
 * @see https://circleci.com/docs/api/v1-reference/#cancel-build
 * @example POST - /project/:vcs-type/:username/:project/:build_num/cancel
 *
 * @param token - CircleCI API token
 * @param buildNumber - Target build number to retry
 * @param action - Action to perform on the build
 * @param circleHost Provide custom url for CircleCI
 * @param vcs - Project's git information that you'd like to retry
 */
function postBuildActions(token, buildNumber, action, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    var url = types_1.createVcsUrl(vcs) + "/" + buildNumber + "/" + action;
    return client_1.client(token, circleHost).post(url);
}
exports.postBuildActions = postBuildActions;
/**
 * Triggers a new build, returns a summary of the build.
 * @see https://circleci.com/docs/api/v1-reference/#new-build
 * @example /project/:vcs-type/:username/:project
 *
 * Triggers a new build, returns a summary of the build.
 * @see https://circleci.com/docs/api/v1-reference/#new-build-branch
 * @example /project/:vcs-type/:username/:project/tree/:branch
 */
function postTriggerNewBuild(token, _a) {
    var circleHost = _a.circleHost, vcs = _a.vcs, _b = _a.options, _c = _b === void 0 ? {} : _b, _d = _c.branch, branch = _d === void 0 ? "" : _d, _e = _c.newBuildOptions, newBuildOptions = _e === void 0 ? {} : _e;
    var url = "" + types_1.createVcsUrl(vcs) + (branch ? "/tree/" + branch : "");
    return client_1.client(token, circleHost).post(url, newBuildOptions);
}
exports.postTriggerNewBuild = postTriggerNewBuild;
//# sourceMappingURL=actions.js.map