"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var client_1 = require("../client");
var util_1 = require("../util");
/**
 * Get all recent builds for CircleCI user
 *
 * @see https://circleci.com/docs/api/v1-reference/#recent-builds
 * @example GET - /recent-builds?limit=10&offset=5
 *
 * @param token - CircleCI API token
 * @param limit - optional - Limit the number of builds returned, max=100
 * @param offset - optional -builds starting from this offset
 * @param circleHost Provide custom url for CircleCI
 * @returns List of recent build summaries
 */
function getRecentBuilds(token, _a) {
    var _b = _a === void 0 ? {} : _a, limit = _b.limit, offset = _b.offset, circleHost = _b.circleHost;
    var url = "" + types_1.API_RECENT_BUILDS + util_1.queryParams({ limit: limit, offset: offset });
    return client_1.client(token, circleHost).get(url);
}
exports.getRecentBuilds = getRecentBuilds;
/**
 * Get recent build summaries for a project
 *
 * Supported query parameters:
 *
 * @example limit - The number of builds to return. Maximum 100, defaults to 30.
 * @example offset - builds starting from this offset, defaults to 0.
 * @example filter -Restricts which builds are returned. Set to "completed", "successful", "failed", "running"
 *
 * @see https://circleci.com/docs/api/v1-reference/#recent-builds-project
 * @example GET - /project/:vcs-type/:username/:project?circle-token=:token&limit=20&offset=5&filter=completed
 *
 * Get recent builds for a project and branch
 * @see https://circleci.com/docs/api/v1-reference/#recent-builds-project-branch
 * @example GET - /project/:vcs-type/:username/:project/tree/:branch
 *
 * @see FullRequest
 * @param token - CircleCI API token
 * @param vcs - Get builds for this project
 * @param options - Optional - Query parameters
 * @param circleHost Provide custom url for CircleCI
 * @returns A list of build summaries
 */
function getBuildSummaries(token, _a) {
    var vcs = _a.vcs, _b = _a.options, options = _b === void 0 ? {} : _b, circleHost = _a.circleHost;
    var limit = options.limit, offset = options.offset, filter = options.filter, branch = options.branch;
    var url = "" + types_1.createVcsUrl(vcs) + (branch ? "/tree/" + branch : "");
    var params = util_1.queryParams({ limit: limit, offset: offset, filter: filter });
    return client_1.client(token, circleHost).get("" + url + params);
}
exports.getBuildSummaries = getBuildSummaries;
/**
 * Get full build details for a single build
 *
 * @see https://circleci.com/docs/api/v1-reference/#build
 * @example /project/:vcs-type/:username/:project/:build_num
 *
 * @param token - CircleCI API token
 * @param buildNumber - Target build number
 * @param circleHost Provide custom url for CircleCI
 * @param vcs - Project's git information
 * @returns Full build details including build steps
 */
function getFullBuild(token, buildNumber, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    var url = types_1.createVcsUrl(vcs) + "/" + buildNumber;
    return client_1.client(token, circleHost).get(url);
}
exports.getFullBuild = getFullBuild;
//# sourceMappingURL=builds.js.map