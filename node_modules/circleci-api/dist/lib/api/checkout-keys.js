"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var client_1 = require("../client");
var util_1 = require("../util");
/**
 * Lists the checkout keys for a project
 *
 * @see https://circleci.com/docs/api/v1-reference/#list-checkout-keys
 * @example GET : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/checkout-key
 *
 * @param token CircleCI API token
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns list of checkout keys for a specific project
 */
function getCheckoutKeys(token, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).get(createUrl(vcs));
}
exports.getCheckoutKeys = getCheckoutKeys;
/**
 * Create a checkout key for a project
 *
 * @see https://circleci.com/docs/api/v1-reference/#new-checkout-key
 * @example POST : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/checkout-key
 *
 * @param token CircleCI API token
 * @param key Key to create for project
 * @param vcs Git information for project
 * @param circleHost Provide custom url for CircleCI
 * @returns New checkout key
 */
function createCheckoutKey(token, key, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).post(createUrl(vcs), key, util_1.createJsonHeader());
}
exports.createCheckoutKey = createCheckoutKey;
/**
 * Get a single checkout key from it's fingerprint
 *
 * @see https://circleci.com/docs/api/v1-reference/#get-checkout-key
 * @example POST : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/checkout-key
 *
 * @param token CircleCI API token
 * @param fingerprint Fingerprint of the key to fetch
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns list of checkout keys for a specific project
 */
function getCheckoutKey(token, fingerprint, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).get(createUrl(vcs, fingerprint));
}
exports.getCheckoutKey = getCheckoutKey;
/**
 * Deletes a checkout key
 *
 * @see https://circleci.com/docs/api/v1-reference/#delete-checkout-key
 * @example DELETE : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/checkout-key/:fingerprint
 *
 * @param token CircleCI API token
 * @param fingerprint Fingerprint of the key to delete
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns Status message of deletion
 */
function deleteCheckoutKey(token, fingerprint, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).delete(createUrl(vcs, fingerprint));
}
exports.deleteCheckoutKey = deleteCheckoutKey;
/**
 * Create a url for checkout-key operations
 * @private
 * @param vcs Git information for project
 * @param name Optional, Name of the environment variable
 */
function createUrl(vcs, fingerprint) {
    return types_1.createVcsUrl(vcs) + "/checkout-key" + (fingerprint ? "/" + fingerprint : "");
}
//# sourceMappingURL=checkout-keys.js.map