"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var client_1 = require("../client");
var util_1 = require("../util");
/**
 * List all of a projects environment variables, part of the
 * value will be masked with *'s
 *
 * @see getEnv for retrieving the hidden value of an env variable
 *
 * @see https://circleci.com/docs/api/v1-reference/#list-environment-variables
 * @example GET : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/envvar
 *
 * @param token CircleCI API token
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns list of env variables for a specific project
 */
function listEnv(token, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).get(createUrl(vcs));
}
exports.listEnv = listEnv;
/**
 * Add environment variable to project
 *
 * @see https://circleci.com/docs/api/v1-reference/#add-environment-variable
 * @example POST : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/envvar
 *
 * @param token CircleCI API token
 * @param payload Environment variable object to add to project
 * @param vcs Git information for project
 * @param circleHost Provide custom url for CircleCI
 * @returns newly created environment variable
 */
function addEnv(token, payload, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).post(createUrl(vcs), payload, util_1.createJsonHeader());
}
exports.addEnv = addEnv;
/**
 * Gets the hidden value of environment variable :name
 *
 * @example GET : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/envvar/:name
 * @see https://circleci.com/docs/api/v1-reference/#get-environment-variable
 *
 * @param token CircleCI API token
 * @param envName Name of variable to fetch value
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns Full hidden value of environment variable
 */
function getEnv(token, envName, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).get(createUrl(vcs, envName));
}
exports.getEnv = getEnv;
/**
 * Deletes the environment variable named ':name'
 *
 * @example DELETE : https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/envvar/:name
 * @see https://circleci.com/docs/api/v1-reference/#delete-environment-variable
 *
 * @param token CircleCI API token
 * @param envName Name of variable to fetch value
 * @param circleHost Provide custom url for CircleCI
 * @param vcs Git information for project
 * @returns Status message result of operation
 */
function deleteEnv(token, envName, _a) {
    var circleHost = _a.circleHost, vcs = __rest(_a, ["circleHost"]);
    return client_1.client(token, circleHost).delete(createUrl(vcs, envName));
}
exports.deleteEnv = deleteEnv;
/**
 * Create a url for env operations
 * @private
 * @param vcs Git information for project
 * @param name Optional, Name of the environment variable
 */
function createUrl(vcs, name) {
    if (name === void 0) { name = ""; }
    return types_1.createVcsUrl(vcs) + "/envvar" + (name ? "/" + name : "");
}
//# sourceMappingURL=env.js.map