"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
/**
 * Validate a Request object for endpoints that require
 * certain information
 * @param token - CircleCI API token
 * @param type - Git type
 * @param owner - Repository owner
 * @param repo - Target repository
 * @throws If options passed in are not valid
 */
function validateVCSRequest(_a) {
    var token = _a.token, _b = _a.vcs, type = _b.type, owner = _b.owner, repo = _b.repo;
    if (!token) {
        throw new Error("CircleCiApi - No token was provided");
    }
    var missing = [];
    if (!type) {
        missing.push("type");
    }
    if (!owner) {
        missing.push("owner");
    }
    if (!repo) {
        missing.push("repo");
    }
    if (missing.length) {
        throw new Error("CircleCiApi - Missing options " + missing);
    }
}
exports.validateVCSRequest = validateVCSRequest;
/**
 * Take a Options object and map it to query parameters
 * @example { limit: 5, branch: "develop" } => /builds?branch=develop&limit=5
 * @param opts - Query param object, branch is defaulted to master
 * @param ignoreBranch - Ignore the 'branch' option
 * @returns A string containing url encoded query params
 */
function queryParams(opts) {
    if (opts === void 0) { opts = {}; }
    var params = Object.keys(opts)
        .filter(function (key) { return typeof opts[key] !== "undefined" && opts[key] !== null; })
        .reduce(function (prev, key, arr) { return prev.concat([
        key + "=" + encodeURIComponent(opts[key])
    ]); }, [])
        .join("&");
    return params.length ? "?" + params : "";
}
exports.queryParams = queryParams;
/**
 * Takes a string and will return the matching type, or
 * default to GitType.GITHUB
 * @default GitType.GITHUB
 * @see GitType
 * @param type - Raw string type
 */
function getGitType(type) {
    var formatted = type
        .trim()
        .replace(/ /g, "")
        .toLowerCase();
    if (formatted === types_1.GitType.BITBUCKET) {
        return formatted;
    }
    return types_1.GitType.GITHUB;
}
exports.getGitType = getGitType;
/**
 * Create JSON headers for Axios
 */
function createJsonHeader() {
    return {
        headers: {
            "Content-Type": "application/json",
            Accepts: "application/json"
        }
    };
}
exports.createJsonHeader = createJsonHeader;
//# sourceMappingURL=util.js.map