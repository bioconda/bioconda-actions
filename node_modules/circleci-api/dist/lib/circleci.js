"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var types_1 = require("./types");
var projects_1 = require("./api/projects");
var builds_1 = require("./api/builds");
var artifacts_1 = require("./api/artifacts");
var user_1 = require("./api/user");
var api_1 = require("./api");
var env_1 = require("./api/env");
var cache_1 = require("./api/cache");
var checkout_keys_1 = require("./api/checkout-keys");
var metadata_1 = require("./api/metadata");
var misc_1 = require("./api/misc");
// TODO
/*
  For the endpoints that accept filters/offset/etc
  modify factory functions to pass in only required options
*/
/**
 * CircleCI API Wrapper
 * A wrapper for all of the circleci api calls.
 * Most values can be overridden by individual methods
 *
 */
var CircleCI = /** @class */ (function () {
    /**
     *
     * @param token CircleCI API token
     * @param vcs Default git information
     * @param vcs.type Git project type ex "github" | "bitbucket"
     * @param vcs.owner Owner of the git repository
     * @param vcs.repo Git repository name
     * @param options Additional query parameters
     * @returns {CircleCI} wrapper for CircleCI
     */
    function CircleCI(_a) {
        var token = _a.token, _b = _a.vcs, _c = _b === void 0 ? {} : _b, _d = _c.type, type = _d === void 0 ? types_1.GitType.GITHUB : _d, _e = _c.owner, owner = _e === void 0 ? "" : _e, _f = _c.repo, repo = _f === void 0 ? "" : _f, _g = _a.options, options = _g === void 0 ? {} : _g, circleHost = _a.circleHost;
        this.token = token;
        this.vcs = { type: type, owner: owner, repo: repo };
        this.options = options;
        this.circleOptions = { circleHost: circleHost };
    }
    /**
     * Get the options used to create this instance
     */
    CircleCI.prototype.defaults = function () {
        return { token: this.token, vcs: this.vcs, options: this.options };
    };
    /**
     * Adds the CircleCI token to a url
     * @param url URL to modify
     */
    CircleCI.prototype.addToken = function (url) {
        return url + "?circle-token=" + this.token;
    };
    /**
     * Get the currently authenticated user
     */
    CircleCI.prototype.me = function () {
        return user_1.getMe(this.token, this.circleOptions);
    };
    /**
     * Get a list of all the projects the user follows
     */
    CircleCI.prototype.projects = function () {
        return projects_1.getAllProjects(this.token, this.circleOptions);
    };
    /**
     * Follow a new project. CircleCI will then monitor the project for automatic building of commits.
     * @param opts Project information
     */
    CircleCI.prototype.followProject = function (opts) {
        var _a = this.createRequest(opts), token = _a.token, rest = __rest(_a, ["token"]);
        return projects_1.postFollowNewProject(token, __assign({}, rest, this.circleOptions));
    };
    /**
     * Get all recent builds for CircleCI user
     * @param reqOptions Optional, Request options
     * @param reqOptions.options.limit Optional, Limit the number of builds returned, max=100
     * @param reqOptions.options.offset Optional, builds starting from this offset
     * @param opts Optional settings
     */
    CircleCI.prototype.recentBuilds = function (reqOptions, opts) {
        if (reqOptions === void 0) { reqOptions = {}; }
        var _a = this.createRequest(__assign({}, (opts || {}), { options: __assign({}, (opts ? opts.options : {}), reqOptions) })), token = _a.token, options = _a.options;
        return builds_1.getRecentBuilds(token, __assign({}, options, this.circleOptions));
    };
    /**
     * Get recent build summaries for a project
     * @param reqOptions Optional, request options for filtering, limiting, etc
     * @param reqOptions.limit Optional, the number of builds to return. Maximum 100, defaults to 30.
     * @param reqOptions.offset Optional, builds starting from this offset, defaults to 0.
     * @param reqOptions.filter Optional, restricts which builds are returned. Set to "completed", "successful", "failed", "running"
     * @param opts Optional settings
     */
    CircleCI.prototype.builds = function (reqOptions, opts) {
        var _a = this.createRequest(__assign({}, (opts || {}), { options: __assign({}, (opts ? opts.options : {}), (reqOptions || {})) })), token = _a.token, rest = __rest(_a, ["token"]);
        return builds_1.getBuildSummaries(token, __assign({}, rest, this.circleOptions));
    };
    /**
     * Get recent builds for a project and branch
     * @param branch Target branch to fetch builds for
     * @param reqOptions Optional, request options for filtering, limiting, etc
     * @param reqOptions.limit Optional, the number of builds to return. Maximum 100, defaults to 30.
     * @param reqOptions.offset Optional, builds starting from this offset, defaults to 0.
     * @param reqOptions.filter Optional, restricts which builds are returned. Set to "completed", "successful", "failed", "running"
     * @param opts Optional settings
     */
    CircleCI.prototype.buildsFor = function (branch, reqOptions, opts) {
        if (branch === void 0) { branch = "master"; }
        if (reqOptions === void 0) { reqOptions = {}; }
        var _a = this.createRequest(__assign({}, opts, { options: __assign({}, (opts ? opts.options : {}), reqOptions, { branch: branch }) })), token = _a.token, rest = __rest(_a, ["token"]);
        return builds_1.getBuildSummaries(token, __assign({}, rest, this.circleOptions));
    };
    /**
     * Get full build details for a single build
     * @param buildNumber Target build number
     * @param opts Optional settings
     */
    CircleCI.prototype.build = function (buildNumber, opts) {
        var _a = this.createRequest(__assign({}, (opts || {}), { options: __assign({}, (opts ? opts.options : {})) })), token = _a.token, vcs = _a.vcs;
        return builds_1.getFullBuild(token, buildNumber, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Get artifacts for single project build
     * @param buildNumber Target build number
     * @param opts Optional settings to override class defaults
     */
    CircleCI.prototype.artifacts = function (buildNumber, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return artifacts_1.getBuildArtifacts(token, buildNumber, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Get the latest build artifacts for a project
     * Pass a branch in the options to target a specific branch
     * @param reqOptions Optional, request options for filtering and specifying a branch
     * @param reqOptions.branch The branch you would like to look in for the latest build. Returns artifacts for latest build in entire project if omitted.
     * @param reqOptions.filter Restricts which builds are returned. Set to "completed", "successful", "failed", "running"
     * @param opts Optional settings
     */
    CircleCI.prototype.latestArtifacts = function (reqOptions, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = this.createRequest(__assign({}, opts, { options: __assign({}, opts.options, (reqOptions || {})) })), token = _a.token, rest = __rest(_a, ["token"]);
        return artifacts_1.getLatestArtifacts(token, __assign({}, rest, this.circleOptions));
    };
    /**
     * Retries the build, returns a summary of the new build.
     * @param build Target build number
     * @param opts Optional settings
     */
    CircleCI.prototype.retry = function (build, opts) {
        return this.performAction(__assign({}, this.createRequest(opts), this.circleOptions), build, types_1.BuildAction.RETRY);
    };
    /**
     * Cancels the build, returns a summary of the new build.
     * @param build Target build number
     * @param opts Optional settings
     */
    CircleCI.prototype.cancel = function (build, opts) {
        return this.performAction(__assign({}, this.createRequest(opts), this.circleOptions), build, types_1.BuildAction.CANCEL);
    };
    /**
     * Triggers a new build, returns a summary of the build.
     * @see https://circleci.com/docs/api/v1-reference/#new-build
     * @param opts Optional settings
     * @param opts.options.newBuildOptions Additional build settings
     */
    CircleCI.prototype.triggerBuild = function (opts) {
        var _a = this.createRequest(opts), token = _a.token, rest = __rest(_a, ["token"]);
        return api_1.postTriggerNewBuild(token, __assign({}, rest, this.circleOptions));
    };
    /**
     * Triggers a new build for a specific branch.
     * @see https://circleci.com/docs/api/v1-reference/#new-build-branch
     * @param branch Optional, branch to target, defaults to 'master'
     * @param opts Optional settings
     * @param opts.options.newBuildOptions Additional build settings
     */
    CircleCI.prototype.triggerBuildFor = function (branch, opts) {
        if (branch === void 0) { branch = "master"; }
        var _a = this.createRequest(__assign({}, opts, { options: __assign({}, (opts ? opts.options : {}), { branch: branch }) })), token = _a.token, request = __rest(_a, ["token"]);
        return api_1.postTriggerNewBuild(token, __assign({}, request, this.circleOptions));
    };
    /*
     * Cache
     */
    /**
     * Clear the cache for the project
     * @see clearCache for implementation
     * @see https://circleci.com/docs/api/v1-reference/#clear-cache
     * @param opts Optional settings
     */
    CircleCI.prototype.clearCache = function (opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return cache_1.clearCache(token, __assign({}, vcs, this.circleOptions));
    };
    /*
     * Environment Variables
     */
    /**
     * List all of a projects environment variables, values will not be fully shown
     * @see getEnvVar for accessing full value
     * @see listEnv
     * @see https://circleci.com/docs/api/v1-reference/#list-environment-variables
     * @param opts Optional settings
     */
    CircleCI.prototype.listEnvVars = function (opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return env_1.listEnv(token, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Add environment variable to project
     * @see addEnv
     * @see https://circleci.com/docs/api/v1-reference/#add-environment-variable
     * @param variable Environment variable to add to project
     * @param opts Optional settings
     */
    CircleCI.prototype.addEnvVar = function (variable, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return env_1.addEnv(token, variable, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Get the hidden value of an environment variable
     * @see getEnv
     * @see https://circleci.com/docs/api/v1-reference/#get-environment-variable
     * @param envName Name of the variable to fetch
     * @param opts Optional settings
     */
    CircleCI.prototype.getEnvVar = function (envName, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return env_1.getEnv(token, envName, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Delete an environment variable
     * @see deleteEnv
     * @see https://circleci.com/docs/api/v1-reference/#delete-environment-variable
     * @param envName Name of the variable to delete
     * @param opts Optional settings
     */
    CircleCI.prototype.deleteEnvVar = function (envName, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return env_1.deleteEnv(token, envName, __assign({}, vcs, this.circleOptions));
    };
    /*
     * Checkout Keys
     */
    /**
     * List all the checkout keys for the project
     * @see getCheckoutKeys
     * @see https://circleci.com/docs/api/v1-reference/#list-checkout-keys
     * @param opts Optional request settings
     */
    CircleCI.prototype.listCheckoutKeys = function (opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return checkout_keys_1.getCheckoutKeys(token, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Create a new checkout key
     * @see createCheckoutKey
     * @see https://circleci.com/docs/api/v1-reference/#new-checkout-key
     * @param type Type of checkout key to create
     * @param opts Optional request settings
     */
    CircleCI.prototype.addCheckoutKey = function (type, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return checkout_keys_1.createCheckoutKey(token, { type: type }, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Get a single checkout key from it's fingerprint
     * @see getCheckoutKey
     * @see https://circleci.com/docs/api/v1-reference/#get-checkout-key
     * @param fingerprint Fingerprint of the key to get
     * @param opts Optional request settings
     */
    CircleCI.prototype.getCheckoutKey = function (fingerprint, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return checkout_keys_1.getCheckoutKey(token, fingerprint, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Delete a checkout key
     * @see deleteCheckoutKey
     * @see https://circleci.com/docs/api/v1-reference/#delete-checkout-key
     * @param fingerprint Fingerprint of the key to delete
     * @param opts Optional request settings
     */
    CircleCI.prototype.deleteCheckoutKey = function (fingerprint, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return checkout_keys_1.deleteCheckoutKey(token, fingerprint, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Get test metadata for a build
     * @see getTestMetadata
     * @see https://circleci.com/docs/api/v1-reference/#test-metadata
     * @param buildNumber Build number to get metadata for
     * @param opts Optional request settings
     */
    CircleCI.prototype.getTestMetadata = function (buildNumber, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return metadata_1.getTestMetadata(token, buildNumber, __assign({}, vcs, this.circleOptions));
    };
    /**
     * Creates an ssh key that will be used to access the external system identified by
     * the hostname parameter for SSH key-based authentication.
     * @see https://circleci.com/docs/api/v1-reference/#ssh-keys
     * @param token CircleCI API token
     * @param vcs Git information for project
     * @param key SSH key details to add to project
     */
    CircleCI.prototype.addSSHKey = function (key, opts) {
        var _a = this.createRequest(opts), token = _a.token, vcs = _a.vcs;
        return misc_1.addSSHKey(token, vcs, key, this.circleOptions);
    };
    /**
     * Adds your Heroku API key to CircleCI
     * @see https://circleci.com/docs/api/v1-reference/#ssh-keys
     * @param token CircleCI API token
     * @param key Heroku key to add to project
     */
    CircleCI.prototype.addHerokuKey = function (key, opts) {
        var token = this.createRequest(opts).token;
        return misc_1.addHerokuKey(token, key, this.circleOptions);
    };
    /*
     * Private functions
     */
    /**
     * Take a request object and merge it with the class properties.
     * Passed in options always take priority over the class properties
     * @param opts Optional, request options
     * @throws If missing a token, or VCS options
     * @returns Merged request object
     */
    CircleCI.prototype.createRequest = function (opts) {
        if (opts === void 0) { opts = {}; }
        var request = {
            token: opts.token || this.token,
            options: __assign({}, this.options, opts.options),
            vcs: __assign({}, this.vcs, opts.vcs)
        };
        util_1.validateVCSRequest(request);
        return request;
    };
    /**
     * Perform a build action on a build
     * @see BuildAction for list of actions
     * @see postBuildActions for implementation
     * @param request Request information
     * @param build Build number to perform action on
     * @param action Type of action to perform
     */
    CircleCI.prototype.performAction = function (request, build, action) {
        var token = request.token, vcs = request.vcs, circleHost = request.circleHost;
        return api_1.postBuildActions(token, build, action, __assign({}, vcs, { circleHost: circleHost }));
    };
    return CircleCI;
}());
exports.CircleCI = CircleCI;
//# sourceMappingURL=circleci.js.map